<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
<title>namepsace parser v2</title>
<link rel="stylesheet" type="text/css" href="JSSpec-lib/JSSpec.css" />
<script type="text/javascript" src="JSSpec-lib/diff_match_patch.js"></script>
<script type="text/javascript" src="JSSpec-lib/JSSpec.js"></script>
<script type="text/javascript" src="../js/lib/mootools-core-1.3.1-full-nocompat.js"></script>
<script type="text/javascript" src="../Source/MooContentAssist.js"></script>
<script type="text/javascript">// <![CDATA[

var MooContentAssist_JSSpec = {
	namespaceParser2: function(string,caretPosition,allowedArr) {
		var namespace = [];
		var allowed  = ["()", "$", "#", "{{","}}","((","))","[[","]]"];
		if (allowedArr!==undefined) {
			allowed=allowedArr;
		}
		var positionStart = 0;
		for (var i=caretPosition-1;i>0;--i) {
			var character = string[i];
			var previousCharacter = string[i+1];
			if (character===undefined) {
				break;
			}
			if (character=="." && previousCharacter==".") {
				positionStart = i+1+1; 
				break; 
			}
			var cursorJump = 0;
			var endsWithAllowed = allowed.some(function(item) {
				if (item.length==1) {
					return character==item;
				}
				else if (string.substring(i-item.length,i)==item) {
					cursorJump = item.length-1;
					return true;
				}
				else if (string.substring(i,i+item.length)==item) {
					return true;
				}
			});
			if (cursorJump>0) {
				i = i-cursorJump;
				character=string[cursorJump];
				previousCharacter=string[cursorJump+1];
				continue;
			}
			if ( character!="." && !(character.test(/^\w$/) || endsWithAllowed ) ) {
				positionStart = i+1;
				if (previousCharacter!==undefined) {
					var jumpPrevious = 1;
					var previousCharacterEndsWithAllowed = allowed.some(function(item) {
						/*
						if (string == "{{1}}.((2)).[[3]]") { 
							console.log("test - i:",i,"|",string.substring(i,i+item.length),"| item:",item);
							console.log("test2 - i:",i,"|",string.substring(i-item.length+1,i+1),"| item:",item);
						}
						*/
						if (item.length==1) {
							if (previousCharacter==item) {
								jumpPrevious=1;
								return true;	
							}
						} 
						else if (string.substring(i,i+item.length)==item) {
							//forward matching
							jumpPrevious = item.length;
							return true;
						}
						else if (string.substring((i+1-item.length),i+1)==item) {
							//backward matching
							jumpPrevious = item.length;
							return true;
						}
					});
					console.log(string,i,jumpPrevious);
					if (!previousCharacterEndsWithAllowed && !previousCharacter.test(/^\w$/)) { 
						//here only allowed
						positionStart = i+1+jumpPrevious;
					} 
				}
				break;
			}
		}
		if(positionStart>caretPosition) {
			positionStart=caretPosition;
		}
		string = string.substring(positionStart,caretPosition).trim();
		if (string.length>0) {
			namespace=string.split(".");
			if (namespace[namespace.length-1]=="") {
				namespace[namespace.length-1] = "/";
			}
		}
		else {
			namespace=["/"];
		}
		return namespace;	
	}
};

describe("String to test:  |ExampleString|", {
	"at position 7 - must return one element": function() {
		var ns;
		ns = MooContentAssist_JSSpec.namespaceParser2("ExampleString",7);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("Example");
	},
	"at position 13 - must return one element": function() {
		var ns;
		ns = MooContentAssist_JSSpec.namespaceParser2("ExampleString",13);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("ExampleString");
	}
});

describe("String to test:  |Example.String|", {
	"at position 14": function() {
		var ns;
		ns = MooContentAssist_JSSpec.namespaceParser2("Example.String",14);
		value_of(ns).should_have_exactly(2, "items");
		expect(ns[0]).should_be("Example");
		expect(ns[1]).should_be("String");
	}
});

describe("String to test:  |Example Str.ing|", {
	"at position 14": function() {
		var ns;
		ns = MooContentAssist_JSSpec.namespaceParser2("Example Str.ing",14);
		value_of(ns).should_have_exactly(2, "items");
		expect(ns[0]).should_be("Str");
		expect(ns[1]).should_be("in");
	}
});

describe("String to test:  |Example.|", {
	"at position 8": function() {
		var ns = MooContentAssist_JSSpec.namespaceParser2("Example.",8);
		value_of(ns).should_have_exactly(2, "items");
		expect(ns[0]).should_be("Example");
		expect(ns[1]).should_be("/");
	}
});

describe("String to test:  |Example..|", {
	"at position 9": function() {
		var ns = MooContentAssist_JSSpec.namespaceParser2("Example..",9);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("/");
	}
});

describe("String to test:  |Exa..mple|", {
	"at position 9": function() {
		var ns = MooContentAssist_JSSpec.namespaceParser2("Exa..mple",9);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("mple");
	}
});

describe("String to test:  |Example String|", {
	"at position 8": function() {
		var ns;
		ns = MooContentAssist_JSSpec.namespaceParser2("Example String",8);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("/");
	},
	"at position 14": function() {
		var ns = MooContentAssist_JSSpec.namespaceParser2("Example String",14);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("String");
	}
	
});

describe("String to test: |Example String| with various delimitiers", {
	"at position 8 - must return one element": function() {
		var ns = MooContentAssist_JSSpec.namespaceParser2("Example\nString",8);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("/");
	},
	"at position 14 - must return one element": function() {
		var ns = MooContentAssist_JSSpec.namespaceParser2("Example\nString",14);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("String");
		
		ns = MooContentAssist_JSSpec.namespaceParser2("Example<String",14);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("String");
		
		ns = MooContentAssist_JSSpec.namespaceParser2("Example(String",14);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("String");
		
		ns = MooContentAssist_JSSpec.namespaceParser2("Exampl()String",14);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("Exampl()String");
	},
	"at position 15:": function() {	
		//debugger; 

		var ns = MooContentAssist_JSSpec.namespaceParser2("Example<.String",15);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("String");
		
		ns = MooContentAssist_JSSpec.namespaceParser2("Example.<String",15);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("String");
		
	}
	
});

describe("String to test:  |kkk1 eee2 yyy3|", {
	"at position 8 - must return one element": function() {
		var ns = MooContentAssist_JSSpec.namespaceParser2("kkk1\neee2\nyyy3",8);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("eee");
	},
	"at position 8 - with different Delimitiers |kkk1()eee2[]yyy3|": function() {
		var ns = MooContentAssist_JSSpec.namespaceParser2("kkk1()eee2[]yyy3",8);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("kkk1()ee");
	},
	'at position 11 - with different Delimitiers 2 |kkk1("eee2",yyy3)|': function() {
		var ns = MooContentAssist_JSSpec.namespaceParser2('kkk1("eee2",yyy3)',11);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("/");
	},
	'at position 12 - with different Delimitiers 2 |kkk1("eee2",yyy3)|': function() {
		var ns = MooContentAssist_JSSpec.namespaceParser2('kkk1("eee2",yyy3)',12);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("/");
	},
	'at position 13 - with different Delimitiers 2 |kkk1("eee2",yyy3)|': function() {
		var ns = MooContentAssist_JSSpec.namespaceParser2('kkk1("eee2",yyy3)',13);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("y");
	},
	'at position 10 - with different Delimitiers 2 |kkk1()eee2': function() {
		var ns = MooContentAssist_JSSpec.namespaceParser2('kkk1()eee2',10);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("kkk1()eee2");
	},
	"at position 11 - with different Delimitiers |kkk1()eee2[]yyy3|": function() {
		var ns = MooContentAssist_JSSpec.namespaceParser2("kkk1()eee2[]yyy3",11);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("/");
	},
	"at position 11 - with different Delimitiers |kkk1()eee2[]yyy3| and other delimitier": function() {
		var ns = MooContentAssist_JSSpec.namespaceParser2("1[]2",4,["[]"]);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("1[]2");
	}
});
describe("String to test: |a b\tc(|", {
	"at position 3 - must return one element": function() {
		var ns = MooContentAssist_JSSpec.namespaceParser2("a b\tc(",3);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("b");
	},
	"at position 4 - must return one element": function() {
		var ns = MooContentAssist_JSSpec.namespaceParser2("a b\tc(",4);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("/");
	},
	"at position 6 - must return one element": function() {
		var ns = MooContentAssist_JSSpec.namespaceParser2("a b\tc(",6);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("/");
	},
	"at position 6 - must return one element": function() {
		var ns = MooContentAssist_JSSpec.namespaceParser2("a b\tc(.",6);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("/");
	},
	"at position 7 - must return one element": function() {
		var ns = MooContentAssist_JSSpec.namespaceParser2("a b\tc(.",7);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("/");
	},
	"at position 7 - must return one element": function() {
		//debugger;
		var ns = MooContentAssist_JSSpec.namespaceParser2("a b\tc($",7);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("$");
	}
});
describe("String to Test: | $test.we.we2|", {
	"at posistion 5" : function() {
		var ns = MooContentAssist_JSSpec.namespaceParser2(" $test.we.we2",5);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("$tes");
	},
	"at posistion 12" : function() {
		var ns = MooContentAssist_JSSpec.namespaceParser2(" $test.we.we2",12);
		value_of(ns).should_have_exactly(3, "items");
		expect(ns[0]).should_be("$test");
		expect(ns[1]).should_be("we");
		expect(ns[2]).should_be("we");
	},
});

describe("String to Test: |{{1}}.((2)).[[3]]|", {
	"at posistion 5" : function() {
		var stringToTest= "{{1}}.((2)).[[3]]"; 		
		var ns = MooContentAssist_JSSpec.namespaceParser2(stringToTest,5);
		value_of(ns).should_have_exactly(1, "items");
		expect(ns[0]).should_be("{{1}}");
	}
});
// ]]></script>
</head>
<body><textarea id="t"></textarea></body>
</html>

